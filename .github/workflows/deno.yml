name: Test and Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Verify formatting
        run: deno fmt --check

      - name: Check code
        run: deno task check

      - name: Run tests
        run: deno task test

  publish:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Detect changed packages
        id: changed-packages
        run: |
          changed=$(git diff --name-only HEAD^ HEAD | grep 'packages/' || true)
          echo "changed_files=$changed" >> $GITHUB_OUTPUT
          if echo "$changed" | grep -q "packages/core/"; then
            echo "core_changed=true" >> $GITHUB_OUTPUT
          else
            echo "core_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump versions
        run: |
          bump_version() {
            local pkg_json="$1"
            local bump_type="$2"
            local version=$(grep '"version"' "$pkg_json" | awk -F '"' '{print $4}')
            IFS='.' read -r major minor patch <<< "$version"

            if [ "$bump_type" == "minor" ]; then
              minor=$((minor + 1))
              patch=0
            elif [ "$bump_type" == "patch" ]; then
              patch=$((patch + 1))
            fi

            new_version="$major.$minor.$patch"
            sed -i "s/\"version\": \"$version\"/\"version\": \"$new_version\"/" "$pkg_json"
            echo "Updated $pkg_json from $version to $new_version"
          }

          if [ "${{ steps.changed-packages.outputs.core_changed }}" == "true" ]; then
            echo "Core package changed, bumping all packages minor..."
            for pkg in packages/*; do
              bump_version "$pkg/deno.json" minor
            done
          else
            echo "Bumping only changed packages (patch)..."
            for pkg in packages/*; do
              if echo "${{ steps.changed-packages.outputs.changed_files }}" | grep -q "$pkg"; then
                bump_version "$pkg/deno.json" patch
              fi
            done
          fi

      - name: Commit bumped versions
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: bump package versions"

      - name: Publish packages
        run: |
          for pkg in packages/*; do
            if [ -f "$pkg/deno.json" ]; then
              (cd "$pkg" && deno publish)
            fi
          done
